class Solution {
public:
    long long bowlSubarrays(vector<int>& nums) {
        //we use monotonic stack to solve this problem

        // we will keep a array called left which will store the index of nearest greater element on the
        //left element.

        // right -> store the index of nearest greater element on the right of element 

        int n = nums.size();
        vector<int> left(n,-1);
        vector<int> right(n,-1);
        stack<int> st;

        for(int i = 0 ; i<n ; i++)
        {
            while(!st.empty() && nums[i] > nums[st.top()])
            {
                st.pop();
            }

            if(!st.empty())
            {
                left[i] = st.top();
            }
            st.push(i);
        }

        //clear the stack to find the right vector

        while(!st.empty())
        {
            st.pop();
        }

        for(int i = n-1 ; i>=0 ; i--)
        {
            while(!st.empty() && nums[i] > nums[st.top()])
            {
                st.pop();
            }
            if(!st.empty())
            {
                right[i] = st.top();
            }
            st.push(i);
        }

        long long ans = 0;

        for(int i = 0 ; i<n ; i++)
        {
            if(left[i] != -1 && right[i] != -1)
            {
                ans++;
            }
        }
        return ans;
    }
};