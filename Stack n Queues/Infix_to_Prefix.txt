class Solution {
    private:
    int getPriority(char ch)
    {
        if(ch == '^')
            return 3;
        else if(ch == '*' || ch == '/')
            return 2;
        else if(ch == '+' || ch == '-')
            return 1;
        else 
            return 0;
    }
  public:
    string infixToPrefix(string s) {
        // reverse the string and replace ( -> ) & ) -> (
        int n = s.length();
        string temp = "";
        string expression = "";
        stack<char> st;
        
        for(int i = n-1 ; i>=0 ; i--)
        {
            if(s[i] == '(')
                temp.push_back(')');
            else if(s[i] == ')')
                temp.push_back('(');
            else
                temp.push_back(s[i]);
        }

        // use the approach of infix to postfix 
        
        for(int i = 0 ; i<temp.length() ; i++)
        {
            if((temp[i] >= 'A' && temp[i] <='Z') || (temp[i] >= 'a' && temp[i] <='z') || (temp[i] >= '0' && temp[i] <= '9'))
            {
                expression.push_back(temp[i]);
            }
            else
            {
                if(temp[i] == '(')
                    st.push('(');
                else if(temp[i] == ')')
                {
                    while(st.size() && st.top() != '(')
                    {
                        expression.push_back(st.top());
                        st.pop();
                    }
                    if(!st.empty())
                        st.pop();
                }
                else
                {
                    while(st.size() && getPriority(temp[i]) <= getPriority(st.top()))
                    {
                        expression.push_back(st.top());
                        st.pop();
                    }
                    st.push(temp[i]);
                }
            }
        }
        
        while(st.size())
        {
            expression.push_back(st.top());
            st.pop();
        }
        reverse(expression.begin(),expression.end());
        return expression;
    }
};